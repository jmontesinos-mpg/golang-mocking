// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockeryAPIServiceA is an autogenerated mock type for the APIServiceA type
type MockeryAPIServiceA struct {
	mock.Mock
}

type MockeryAPIServiceA_Expecter struct {
	mock *mock.Mock
}

func (_m *MockeryAPIServiceA) EXPECT() *MockeryAPIServiceA_Expecter {
	return &MockeryAPIServiceA_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ID
func (_m *MockeryAPIServiceA) Add(ID string) error {
	ret := _m.Called(ID)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockeryAPIServiceA_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockeryAPIServiceA_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ID string
func (_e *MockeryAPIServiceA_Expecter) Add(ID interface{}) *MockeryAPIServiceA_Add_Call {
	return &MockeryAPIServiceA_Add_Call{Call: _e.mock.On("Add", ID)}
}

func (_c *MockeryAPIServiceA_Add_Call) Run(run func(ID string)) *MockeryAPIServiceA_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockeryAPIServiceA_Add_Call) Return(_a0 error) *MockeryAPIServiceA_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockeryAPIServiceA_Add_Call) RunAndReturn(run func(string) error) *MockeryAPIServiceA_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ID
func (_m *MockeryAPIServiceA) Delete(ID string) error {
	ret := _m.Called(ID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockeryAPIServiceA_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockeryAPIServiceA_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ID string
func (_e *MockeryAPIServiceA_Expecter) Delete(ID interface{}) *MockeryAPIServiceA_Delete_Call {
	return &MockeryAPIServiceA_Delete_Call{Call: _e.mock.On("Delete", ID)}
}

func (_c *MockeryAPIServiceA_Delete_Call) Run(run func(ID string)) *MockeryAPIServiceA_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockeryAPIServiceA_Delete_Call) Return(_a0 error) *MockeryAPIServiceA_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockeryAPIServiceA_Delete_Call) RunAndReturn(run func(string) error) *MockeryAPIServiceA_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields:
func (_m *MockeryAPIServiceA) GetAll() ([]string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockeryAPIServiceA_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockeryAPIServiceA_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *MockeryAPIServiceA_Expecter) GetAll() *MockeryAPIServiceA_GetAll_Call {
	return &MockeryAPIServiceA_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *MockeryAPIServiceA_GetAll_Call) Run(run func()) *MockeryAPIServiceA_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockeryAPIServiceA_GetAll_Call) Return(_a0 []string, _a1 error) *MockeryAPIServiceA_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockeryAPIServiceA_GetAll_Call) RunAndReturn(run func() ([]string, error)) *MockeryAPIServiceA_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockeryAPIServiceA creates a new instance of MockeryAPIServiceA. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockeryAPIServiceA(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockeryAPIServiceA {
	mock := &MockeryAPIServiceA{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
