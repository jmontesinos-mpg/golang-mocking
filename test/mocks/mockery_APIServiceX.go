// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockeryAPIServiceX is an autogenerated mock type for the APIServiceX type
type MockeryAPIServiceX struct {
	mock.Mock
}

type MockeryAPIServiceX_Expecter struct {
	mock *mock.Mock
}

func (_m *MockeryAPIServiceX) EXPECT() *MockeryAPIServiceX_Expecter {
	return &MockeryAPIServiceX_Expecter{mock: &_m.Mock}
}

// IncrementCounterBy provides a mock function with given fields: incr
func (_m *MockeryAPIServiceX) IncrementCounterBy(incr int) error {
	ret := _m.Called(incr)

	if len(ret) == 0 {
		panic("no return value specified for IncrementCounterBy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(incr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockeryAPIServiceX_IncrementCounterBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrementCounterBy'
type MockeryAPIServiceX_IncrementCounterBy_Call struct {
	*mock.Call
}

// IncrementCounterBy is a helper method to define mock.On call
//   - incr int
func (_e *MockeryAPIServiceX_Expecter) IncrementCounterBy(incr interface{}) *MockeryAPIServiceX_IncrementCounterBy_Call {
	return &MockeryAPIServiceX_IncrementCounterBy_Call{Call: _e.mock.On("IncrementCounterBy", incr)}
}

func (_c *MockeryAPIServiceX_IncrementCounterBy_Call) Run(run func(incr int)) *MockeryAPIServiceX_IncrementCounterBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockeryAPIServiceX_IncrementCounterBy_Call) Return(_a0 error) *MockeryAPIServiceX_IncrementCounterBy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockeryAPIServiceX_IncrementCounterBy_Call) RunAndReturn(run func(int) error) *MockeryAPIServiceX_IncrementCounterBy_Call {
	_c.Call.Return(run)
	return _c
}

// SendMessage provides a mock function with given fields: message
func (_m *MockeryAPIServiceX) SendMessage(message string) error {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockeryAPIServiceX_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type MockeryAPIServiceX_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - message string
func (_e *MockeryAPIServiceX_Expecter) SendMessage(message interface{}) *MockeryAPIServiceX_SendMessage_Call {
	return &MockeryAPIServiceX_SendMessage_Call{Call: _e.mock.On("SendMessage", message)}
}

func (_c *MockeryAPIServiceX_SendMessage_Call) Run(run func(message string)) *MockeryAPIServiceX_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockeryAPIServiceX_SendMessage_Call) Return(_a0 error) *MockeryAPIServiceX_SendMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockeryAPIServiceX_SendMessage_Call) RunAndReturn(run func(string) error) *MockeryAPIServiceX_SendMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockeryAPIServiceX creates a new instance of MockeryAPIServiceX. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockeryAPIServiceX(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockeryAPIServiceX {
	mock := &MockeryAPIServiceX{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
